-file("/usr/lib/erlang/lib/parsetools-2.0.7/include/leexinc.hrl", 0).
%% The source of this file is part of leex distribution, as such it
%% has the same Copyright as the other files in the leex
%% distribution. The Copyright is defined in the accompanying file
%% COPYRIGHT. However, the resultant scanner generated by leex is the
%% property of the creator of the scanner and is not covered by that
%% Copyright.

-module(logoscanner).

-export([string/1,string/2,token/2,token/3,tokens/2,tokens/3]).
-export([format_error/1]).

%% User code. This is placed here to allow extra attributes.
-file("/home/zangther/prog/logo-interpreter/logoscanner.xrl", 48).

basic_commands() ->
    ["AV", "TD", "TG", "REC", "FPOS", "FCAP", "VE", "MT", "CT", "LC", "BC", "FCC", "ECRIS"].
reserved_words() ->
    ["REPETE", "HASARD", "CAP", "LOOP", "SI", "DONNE", "TANTQUE", "POUR", "FIN", "RET"].

string_to_number(String) ->
    string_to_number(String, 0).

string_to_number([$.|T], Value) ->
    Value + string_to_decimals(T);
string_to_number([H|T], Value) ->
    NewValue = (Value * 10) + char_to_int(H),
    string_to_number(T, NewValue);
string_to_number([], Value) -> Value.

string_to_decimals(String) ->
    string_to_decimals(lists:reverse(String), 0).
string_to_decimals([H|T], Value) ->
    NewValue = Value * 0.1 + char_to_int(H),
    string_to_decimals(T, NewValue);
string_to_decimals([], Value) -> Value * 0.1.


char_to_int(Char) when Char >= $0, Char =< $9 ->
    Char - $0;
char_to_int(_) -> 0.

string_to_token(String, TokenLine) ->
    case {basic_command(String), reserved_word(String)} of
	{true, _} -> {command, TokenLine, convert_command(String)};
	{_, true} -> {convert_command(String), TokenLine};
	_ -> {symbol, TokenLine, String}
    end.

convert_command(String) ->
    list_to_atom(string:to_lower(String)).

basic_command(String) ->
    lists:member(String, basic_commands()).
reserved_word(String) ->
    lists:member(String, reserved_words()).

string_to_operator("+") -> plus;
string_to_operator("-") -> minus;
string_to_operator("*") -> multiply;
string_to_operator("/") -> divide;
string_to_operator("!") -> fact.


-file("/usr/lib/erlang/lib/parsetools-2.0.7/include/leexinc.hrl", 14).

format_error({illegal,S}) -> ["illegal characters ",io_lib:write_string(S)];
format_error({user,S}) -> S.

string(String) -> string(String, 1).

string(String, Line) -> string(String, Line, String, []).

%% string(InChars, Line, TokenChars, Tokens) ->
%% {ok,Tokens,Line} | {error,ErrorInfo,Line}.
%% Note the line number going into yystate, L0, is line of token
%% start while line number returned is line of token end. We want line
%% of token start.

string([], L, [], Ts) ->                     % No partial tokens!
    {ok,yyrev(Ts),L};
string(Ics0, L0, Tcs, Ts) ->
    case yystate(yystate(), Ics0, L0, 0, reject, 0) of
        {A,Alen,Ics1,L1} ->                  % Accepting end state
            string_cont(Ics1, L1, yyaction(A, Alen, Tcs, L0), Ts);
        {A,Alen,Ics1,L1,_S1} ->              % Accepting transistion state
            string_cont(Ics1, L1, yyaction(A, Alen, Tcs, L0), Ts);
        {reject,_Alen,Tlen,_Ics1,L1,_S1} ->  % After a non-accepting state
            {error,{L0,?MODULE,{illegal,yypre(Tcs, Tlen+1)}},L1};
        {A,Alen,_Tlen,_Ics1,L1,_S1} ->
            string_cont(yysuf(Tcs, Alen), L1, yyaction(A, Alen, Tcs, L0), Ts)
    end.

%% string_cont(RestChars, Line, Token, Tokens)
%% Test for and remove the end token wrapper. Push back characters
%% are prepended to RestChars.

string_cont(Rest, Line, {token,T}, Ts) ->
    string(Rest, Line, Rest, [T|Ts]);
string_cont(Rest, Line, {token,T,Push}, Ts) ->
    NewRest = Push ++ Rest,
    string(NewRest, Line, NewRest, [T|Ts]);
string_cont(Rest, Line, {end_token,T}, Ts) ->
    string(Rest, Line, Rest, [T|Ts]);
string_cont(Rest, Line, {end_token,T,Push}, Ts) ->
    NewRest = Push ++ Rest,
    string(NewRest, Line, NewRest, [T|Ts]);
string_cont(Rest, Line, skip_token, Ts) ->
    string(Rest, Line, Rest, Ts);
string_cont(Rest, Line, {skip_token,Push}, Ts) ->
    NewRest = Push ++ Rest,
    string(NewRest, Line, NewRest, Ts);
string_cont(_Rest, Line, {error,S}, _Ts) ->
    {error,{Line,?MODULE,{user,S}},Line}.

%% token(Continuation, Chars) ->
%% token(Continuation, Chars, Line) ->
%% {more,Continuation} | {done,ReturnVal,RestChars}.
%% Must be careful when re-entering to append the latest characters to the
%% after characters in an accept. The continuation is:
%% {token,State,CurrLine,TokenChars,TokenLen,TokenLine,AccAction,AccLen}

token(Cont, Chars) -> token(Cont, Chars, 1).

token([], Chars, Line) ->
    token(yystate(), Chars, Line, Chars, 0, Line, reject, 0);
token({token,State,Line,Tcs,Tlen,Tline,Action,Alen}, Chars, _) ->
    token(State, Chars, Line, Tcs ++ Chars, Tlen, Tline, Action, Alen).

%% token(State, InChars, Line, TokenChars, TokenLen, TokenLine,
%% AcceptAction, AcceptLen) ->
%% {more,Continuation} | {done,ReturnVal,RestChars}.
%% The argument order is chosen to be more efficient.

token(S0, Ics0, L0, Tcs, Tlen0, Tline, A0, Alen0) ->
    case yystate(S0, Ics0, L0, Tlen0, A0, Alen0) of
        %% Accepting end state, we have a token.
        {A1,Alen1,Ics1,L1} ->
            token_cont(Ics1, L1, yyaction(A1, Alen1, Tcs, Tline));
        %% Accepting transition state, can take more chars.
        {A1,Alen1,[],L1,S1} ->                  % Need more chars to check
            {more,{token,S1,L1,Tcs,Alen1,Tline,A1,Alen1}};
        {A1,Alen1,Ics1,L1,_S1} ->               % Take what we got
            token_cont(Ics1, L1, yyaction(A1, Alen1, Tcs, Tline));
        %% After a non-accepting state, maybe reach accept state later.
        {A1,Alen1,Tlen1,[],L1,S1} ->            % Need more chars to check
            {more,{token,S1,L1,Tcs,Tlen1,Tline,A1,Alen1}};
        {reject,_Alen1,Tlen1,eof,L1,_S1} ->     % No token match
            %% Check for partial token which is error.
            Ret = if Tlen1 > 0 -> {error,{Tline,?MODULE,
                                          %% Skip eof tail in Tcs.
                                          {illegal,yypre(Tcs, Tlen1)}},L1};
                     true -> {eof,L1}
                  end,
            {done,Ret,eof};
        {reject,_Alen1,Tlen1,Ics1,L1,_S1} ->    % No token match
            Error = {Tline,?MODULE,{illegal,yypre(Tcs, Tlen1+1)}},
            {done,{error,Error,L1},Ics1};
        {A1,Alen1,_Tlen1,_Ics1,L1,_S1} ->       % Use last accept match
            token_cont(yysuf(Tcs, Alen1), L1, yyaction(A1, Alen1, Tcs, Tline))
    end.

%% token_cont(RestChars, Line, Token)
%% If we have a token or error then return done, else if we have a
%% skip_token then continue.

token_cont(Rest, Line, {token,T}) ->
    {done,{ok,T,Line},Rest};
token_cont(Rest, Line, {token,T,Push}) ->
    NewRest = Push ++ Rest,
    {done,{ok,T,Line},NewRest};
token_cont(Rest, Line, {end_token,T}) ->
    {done,{ok,T,Line},Rest};
token_cont(Rest, Line, {end_token,T,Push}) ->
    NewRest = Push ++ Rest,
    {done,{ok,T,Line},NewRest};
token_cont(Rest, Line, skip_token) ->
    token(yystate(), Rest, Line, Rest, 0, Line, reject, 0);
token_cont(Rest, Line, {skip_token,Push}) ->
    NewRest = Push ++ Rest,
    token(yystate(), NewRest, Line, NewRest, 0, Line, reject, 0);
token_cont(Rest, Line, {error,S}) ->
    {done,{error,{Line,?MODULE,{user,S}},Line},Rest}.

%% tokens(Continuation, Chars, Line) ->
%% {more,Continuation} | {done,ReturnVal,RestChars}.
%% Must be careful when re-entering to append the latest characters to the
%% after characters in an accept. The continuation is:
%% {tokens,State,CurrLine,TokenChars,TokenLen,TokenLine,Tokens,AccAction,AccLen}
%% {skip_tokens,State,CurrLine,TokenChars,TokenLen,TokenLine,Error,AccAction,AccLen}

tokens(Cont, Chars) -> tokens(Cont, Chars, 1).

tokens([], Chars, Line) ->
    tokens(yystate(), Chars, Line, Chars, 0, Line, [], reject, 0);
tokens({tokens,State,Line,Tcs,Tlen,Tline,Ts,Action,Alen}, Chars, _) ->
    tokens(State, Chars, Line, Tcs ++ Chars, Tlen, Tline, Ts, Action, Alen);
tokens({skip_tokens,State,Line,Tcs,Tlen,Tline,Error,Action,Alen}, Chars, _) ->
    skip_tokens(State, Chars, Line, Tcs ++ Chars, Tlen, Tline, Error, Action, Alen).

%% tokens(State, InChars, Line, TokenChars, TokenLen, TokenLine, Tokens,
%% AcceptAction, AcceptLen) ->
%% {more,Continuation} | {done,ReturnVal,RestChars}.

tokens(S0, Ics0, L0, Tcs, Tlen0, Tline, Ts, A0, Alen0) ->
    case yystate(S0, Ics0, L0, Tlen0, A0, Alen0) of
        %% Accepting end state, we have a token.
        {A1,Alen1,Ics1,L1} ->
            tokens_cont(Ics1, L1, yyaction(A1, Alen1, Tcs, Tline), Ts);
        %% Accepting transition state, can take more chars.
        {A1,Alen1,[],L1,S1} ->                  % Need more chars to check
            {more,{tokens,S1,L1,Tcs,Alen1,Tline,Ts,A1,Alen1}};
        {A1,Alen1,Ics1,L1,_S1} ->               % Take what we got
            tokens_cont(Ics1, L1, yyaction(A1, Alen1, Tcs, Tline), Ts);
        %% After a non-accepting state, maybe reach accept state later.
        {A1,Alen1,Tlen1,[],L1,S1} ->            % Need more chars to check
            {more,{tokens,S1,L1,Tcs,Tlen1,Tline,Ts,A1,Alen1}};
        {reject,_Alen1,Tlen1,eof,L1,_S1} ->     % No token match
            %% Check for partial token which is error, no need to skip here.
            Ret = if Tlen1 > 0 -> {error,{Tline,?MODULE,
                                          %% Skip eof tail in Tcs.
                                          {illegal,yypre(Tcs, Tlen1)}},L1};
                     Ts == [] -> {eof,L1};
                     true -> {ok,yyrev(Ts),L1}
                  end,
            {done,Ret,eof};
        {reject,_Alen1,Tlen1,_Ics1,L1,_S1} ->
            %% Skip rest of tokens.
            Error = {L1,?MODULE,{illegal,yypre(Tcs, Tlen1+1)}},
            skip_tokens(yysuf(Tcs, Tlen1+1), L1, Error);
        {A1,Alen1,_Tlen1,_Ics1,L1,_S1} ->
            Token = yyaction(A1, Alen1, Tcs, Tline),
            tokens_cont(yysuf(Tcs, Alen1), L1, Token, Ts)
    end.

%% tokens_cont(RestChars, Line, Token, Tokens)
%% If we have an end_token or error then return done, else if we have
%% a token then save it and continue, else if we have a skip_token
%% just continue.

tokens_cont(Rest, Line, {token,T}, Ts) ->
    tokens(yystate(), Rest, Line, Rest, 0, Line, [T|Ts], reject, 0);
tokens_cont(Rest, Line, {token,T,Push}, Ts) ->
    NewRest = Push ++ Rest,
    tokens(yystate(), NewRest, Line, NewRest, 0, Line, [T|Ts], reject, 0);
tokens_cont(Rest, Line, {end_token,T}, Ts) ->
    {done,{ok,yyrev(Ts, [T]),Line},Rest};
tokens_cont(Rest, Line, {end_token,T,Push}, Ts) ->
    NewRest = Push ++ Rest,
    {done,{ok,yyrev(Ts, [T]),Line},NewRest};
tokens_cont(Rest, Line, skip_token, Ts) ->
    tokens(yystate(), Rest, Line, Rest, 0, Line, Ts, reject, 0);
tokens_cont(Rest, Line, {skip_token,Push}, Ts) ->
    NewRest = Push ++ Rest,
    tokens(yystate(), NewRest, Line, NewRest, 0, Line, Ts, reject, 0);
tokens_cont(Rest, Line, {error,S}, _Ts) ->
    skip_tokens(Rest, Line, {Line,?MODULE,{user,S}}).

%%skip_tokens(InChars, Line, Error) -> {done,{error,Error,Line},Ics}.
%% Skip tokens until an end token, junk everything and return the error.

skip_tokens(Ics, Line, Error) ->
    skip_tokens(yystate(), Ics, Line, Ics, 0, Line, Error, reject, 0).

%% skip_tokens(State, InChars, Line, TokenChars, TokenLen, TokenLine, Tokens,
%% AcceptAction, AcceptLen) ->
%% {more,Continuation} | {done,ReturnVal,RestChars}.

skip_tokens(S0, Ics0, L0, Tcs, Tlen0, Tline, Error, A0, Alen0) ->
    case yystate(S0, Ics0, L0, Tlen0, A0, Alen0) of
        {A1,Alen1,Ics1,L1} ->                  % Accepting end state
            skip_cont(Ics1, L1, yyaction(A1, Alen1, Tcs, Tline), Error);
        {A1,Alen1,[],L1,S1} ->                 % After an accepting state
            {more,{skip_tokens,S1,L1,Tcs,Alen1,Tline,Error,A1,Alen1}};
        {A1,Alen1,Ics1,L1,_S1} ->
            skip_cont(Ics1, L1, yyaction(A1, Alen1, Tcs, Tline), Error);
        {A1,Alen1,Tlen1,[],L1,S1} ->           % After a non-accepting state
            {more,{skip_tokens,S1,L1,Tcs,Tlen1,Tline,Error,A1,Alen1}};
        {reject,_Alen1,_Tlen1,eof,L1,_S1} ->
            {done,{error,Error,L1},eof};
        {reject,_Alen1,Tlen1,_Ics1,L1,_S1} ->
            skip_tokens(yysuf(Tcs, Tlen1+1), L1, Error);
        {A1,Alen1,_Tlen1,_Ics1,L1,_S1} ->
            Token = yyaction(A1, Alen1, Tcs, Tline),
            skip_cont(yysuf(Tcs, Alen1), L1, Token, Error)
    end.

%% skip_cont(RestChars, Line, Token, Error)
%% Skip tokens until we have an end_token or error then return done
%% with the original rror.

skip_cont(Rest, Line, {token,_T}, Error) ->
    skip_tokens(yystate(), Rest, Line, Rest, 0, Line, Error, reject, 0);
skip_cont(Rest, Line, {token,_T,Push}, Error) ->
    NewRest = Push ++ Rest,
    skip_tokens(yystate(), NewRest, Line, NewRest, 0, Line, Error, reject, 0);
skip_cont(Rest, Line, {end_token,_T}, Error) ->
    {done,{error,Error,Line},Rest};
skip_cont(Rest, Line, {end_token,_T,Push}, Error) ->
    NewRest = Push ++ Rest,
    {done,{error,Error,Line},NewRest};
skip_cont(Rest, Line, skip_token, Error) ->
    skip_tokens(yystate(), Rest, Line, Rest, 0, Line, Error, reject, 0);
skip_cont(Rest, Line, {skip_token,Push}, Error) ->
    NewRest = Push ++ Rest,
    skip_tokens(yystate(), NewRest, Line, NewRest, 0, Line, Error, reject, 0);
skip_cont(Rest, Line, {error,_S}, Error) ->
    skip_tokens(yystate(), Rest, Line, Rest, 0, Line, Error, reject, 0).

yyrev(List) -> lists:reverse(List).
yyrev(List, Tail) -> lists:reverse(List, Tail).
yypre(List, N) -> lists:sublist(List, N).
yysuf(List, N) -> lists:nthtail(N, List).

%% yystate() -> InitialState.
%% yystate(State, InChars, Line, CurrTokLen, AcceptAction, AcceptLen) ->
%% {Action, AcceptLen, RestChars, Line} |
%% {Action, AcceptLen, RestChars, Line, State} |
%% {reject, AcceptLen, CurrTokLen, RestChars, Line, State} |
%% {Action, AcceptLen, CurrTokLen, RestChars, Line, State}.
%% Generated state transition functions. The non-accepting end state
%% return signal either an unrecognised character or end of current
%% input.

-file("/home/zangther/prog/logo-interpreter/logoscanner.erl", 325).
yystate() -> 53.

yystate(56, [83|Ics], Line, Tlen, _, _) ->
    yystate(52, Ics, Line, Tlen+1, 23, Tlen);
yystate(56, [C|Ics], Line, Tlen, _, _) when C >= 65, C =< 82 ->
    yystate(48, Ics, Line, Tlen+1, 23, Tlen);
yystate(56, [C|Ics], Line, Tlen, _, _) when C >= 84, C =< 90 ->
    yystate(48, Ics, Line, Tlen+1, 23, Tlen);
yystate(56, [C|Ics], Line, Tlen, _, _) when C >= 97, C =< 122 ->
    yystate(48, Ics, Line, Tlen+1, 23, Tlen);
yystate(56, Ics, Line, Tlen, _, _) ->
    {23,Tlen,Ics,Line,56};
yystate(55, Ics, Line, Tlen, _, _) ->
    {29,Tlen,Ics,Line};
yystate(54, [79|Ics], Line, Tlen, _, _) ->
    yystate(56, Ics, Line, Tlen+1, 23, Tlen);
yystate(54, [C|Ics], Line, Tlen, _, _) when C >= 65, C =< 78 ->
    yystate(48, Ics, Line, Tlen+1, 23, Tlen);
yystate(54, [C|Ics], Line, Tlen, _, _) when C >= 80, C =< 90 ->
    yystate(48, Ics, Line, Tlen+1, 23, Tlen);
yystate(54, [C|Ics], Line, Tlen, _, _) when C >= 97, C =< 122 ->
    yystate(48, Ics, Line, Tlen+1, 23, Tlen);
yystate(54, Ics, Line, Tlen, _, _) ->
    {23,Tlen,Ics,Line,54};
yystate(53, [124|Ics], Line, Tlen, Action, Alen) ->
    yystate(49, Ics, Line, Tlen+1, Action, Alen);
yystate(53, [93|Ics], Line, Tlen, Action, Alen) ->
    yystate(45, Ics, Line, Tlen+1, Action, Alen);
yystate(53, [91|Ics], Line, Tlen, Action, Alen) ->
    yystate(41, Ics, Line, Tlen+1, Action, Alen);
yystate(53, [84|Ics], Line, Tlen, Action, Alen) ->
    yystate(37, Ics, Line, Tlen+1, Action, Alen);
yystate(53, [83|Ics], Line, Tlen, Action, Alen) ->
    yystate(25, Ics, Line, Tlen+1, Action, Alen);
yystate(53, [81|Ics], Line, Tlen, Action, Alen) ->
    yystate(48, Ics, Line, Tlen+1, Action, Alen);
yystate(53, [82|Ics], Line, Tlen, Action, Alen) ->
    yystate(48, Ics, Line, Tlen+1, Action, Alen);
yystate(53, [80|Ics], Line, Tlen, Action, Alen) ->
    yystate(1, Ics, Line, Tlen+1, Action, Alen);
yystate(53, [78|Ics], Line, Tlen, Action, Alen) ->
    yystate(48, Ics, Line, Tlen+1, Action, Alen);
yystate(53, [79|Ics], Line, Tlen, Action, Alen) ->
    yystate(48, Ics, Line, Tlen+1, Action, Alen);
yystate(53, [77|Ics], Line, Tlen, Action, Alen) ->
    yystate(6, Ics, Line, Tlen+1, Action, Alen);
yystate(53, [76|Ics], Line, Tlen, Action, Alen) ->
    yystate(18, Ics, Line, Tlen+1, Action, Alen);
yystate(53, [69|Ics], Line, Tlen, Action, Alen) ->
    yystate(30, Ics, Line, Tlen+1, Action, Alen);
yystate(53, [68|Ics], Line, Tlen, Action, Alen) ->
    yystate(42, Ics, Line, Tlen+1, Action, Alen);
yystate(53, [67|Ics], Line, Tlen, Action, Alen) ->
    yystate(54, Ics, Line, Tlen+1, Action, Alen);
yystate(53, [66|Ics], Line, Tlen, Action, Alen) ->
    yystate(48, Ics, Line, Tlen+1, Action, Alen);
yystate(53, [65|Ics], Line, Tlen, Action, Alen) ->
    yystate(44, Ics, Line, Tlen+1, Action, Alen);
yystate(53, [62|Ics], Line, Tlen, Action, Alen) ->
    yystate(32, Ics, Line, Tlen+1, Action, Alen);
yystate(53, [61|Ics], Line, Tlen, Action, Alen) ->
    yystate(24, Ics, Line, Tlen+1, Action, Alen);
yystate(53, [60|Ics], Line, Tlen, Action, Alen) ->
    yystate(20, Ics, Line, Tlen+1, Action, Alen);
yystate(53, [58|Ics], Line, Tlen, Action, Alen) ->
    yystate(8, Ics, Line, Tlen+1, Action, Alen);
yystate(53, [48|Ics], Line, Tlen, Action, Alen) ->
    yystate(3, Ics, Line, Tlen+1, Action, Alen);
yystate(53, [47|Ics], Line, Tlen, Action, Alen) ->
    yystate(7, Ics, Line, Tlen+1, Action, Alen);
yystate(53, [45|Ics], Line, Tlen, Action, Alen) ->
    yystate(19, Ics, Line, Tlen+1, Action, Alen);
yystate(53, [42|Ics], Line, Tlen, Action, Alen) ->
    yystate(51, Ics, Line, Tlen+1, Action, Alen);
yystate(53, [43|Ics], Line, Tlen, Action, Alen) ->
    yystate(51, Ics, Line, Tlen+1, Action, Alen);
yystate(53, [41|Ics], Line, Tlen, Action, Alen) ->
    yystate(35, Ics, Line, Tlen+1, Action, Alen);
yystate(53, [40|Ics], Line, Tlen, Action, Alen) ->
    yystate(39, Ics, Line, Tlen+1, Action, Alen);
yystate(53, [38|Ics], Line, Tlen, Action, Alen) ->
    yystate(43, Ics, Line, Tlen+1, Action, Alen);
yystate(53, [34|Ics], Line, Tlen, Action, Alen) ->
    yystate(47, Ics, Line, Tlen+1, Action, Alen);
yystate(53, [33|Ics], Line, Tlen, Action, Alen) ->
    yystate(51, Ics, Line, Tlen+1, Action, Alen);
yystate(53, [32|Ics], Line, Tlen, Action, Alen) ->
    yystate(55, Ics, Line, Tlen+1, Action, Alen);
yystate(53, [13|Ics], Line, Tlen, Action, Alen) ->
    yystate(55, Ics, Line, Tlen+1, Action, Alen);
yystate(53, [10|Ics], Line, Tlen, Action, Alen) ->
    yystate(55, Ics, Line+1, Tlen+1, Action, Alen);
yystate(53, [C|Ics], Line, Tlen, Action, Alen) when C >= 49, C =< 57 ->
    yystate(3, Ics, Line, Tlen+1, Action, Alen);
yystate(53, [C|Ics], Line, Tlen, Action, Alen) when C >= 70, C =< 75 ->
    yystate(48, Ics, Line, Tlen+1, Action, Alen);
yystate(53, [C|Ics], Line, Tlen, Action, Alen) when C >= 85, C =< 90 ->
    yystate(48, Ics, Line, Tlen+1, Action, Alen);
yystate(53, [C|Ics], Line, Tlen, Action, Alen) when C >= 97, C =< 122 ->
    yystate(48, Ics, Line, Tlen+1, Action, Alen);
yystate(53, Ics, Line, Tlen, Action, Alen) ->
    {Action,Alen,Tlen,Ics,Line,53};
yystate(52, [C|Ics], Line, Tlen, _, _) when C >= 65, C =< 90 ->
    yystate(48, Ics, Line, Tlen+1, 15, Tlen);
yystate(52, [C|Ics], Line, Tlen, _, _) when C >= 97, C =< 122 ->
    yystate(48, Ics, Line, Tlen+1, 15, Tlen);
yystate(52, Ics, Line, Tlen, _, _) ->
    {15,Tlen,Ics,Line,52};
yystate(51, Ics, Line, Tlen, _, _) ->
    {28,Tlen,Ics,Line};
yystate(50, [C|Ics], Line, Tlen, _, _) when C >= 65, C =< 90 ->
    yystate(48, Ics, Line, Tlen+1, 11, Tlen);
yystate(50, [C|Ics], Line, Tlen, _, _) when C >= 97, C =< 122 ->
    yystate(48, Ics, Line, Tlen+1, 11, Tlen);
yystate(50, Ics, Line, Tlen, _, _) ->
    {11,Tlen,Ics,Line,50};
yystate(49, Ics, Line, Tlen, _, _) ->
    {8,Tlen,Ics,Line};
yystate(48, [C|Ics], Line, Tlen, _, _) when C >= 65, C =< 90 ->
    yystate(48, Ics, Line, Tlen+1, 23, Tlen);
yystate(48, [C|Ics], Line, Tlen, _, _) when C >= 97, C =< 122 ->
    yystate(48, Ics, Line, Tlen+1, 23, Tlen);
yystate(48, Ics, Line, Tlen, _, _) ->
    {23,Tlen,Ics,Line,48};
yystate(47, Ics, Line, Tlen, _, _) ->
    {10,Tlen,Ics,Line};
yystate(46, [86|Ics], Line, Tlen, _, _) ->
    yystate(50, Ics, Line, Tlen+1, 23, Tlen);
yystate(46, [C|Ics], Line, Tlen, _, _) when C >= 65, C =< 85 ->
    yystate(48, Ics, Line, Tlen+1, 23, Tlen);
yystate(46, [C|Ics], Line, Tlen, _, _) when C >= 87, C =< 90 ->
    yystate(48, Ics, Line, Tlen+1, 23, Tlen);
yystate(46, [C|Ics], Line, Tlen, _, _) when C >= 97, C =< 122 ->
    yystate(48, Ics, Line, Tlen+1, 23, Tlen);
yystate(46, Ics, Line, Tlen, _, _) ->
    {23,Tlen,Ics,Line,46};
yystate(45, Ics, Line, Tlen, _, _) ->
    {25,Tlen,Ics,Line};
yystate(44, [66|Ics], Line, Tlen, _, _) ->
    yystate(40, Ics, Line, Tlen+1, 23, Tlen);
yystate(44, [65|Ics], Line, Tlen, _, _) ->
    yystate(48, Ics, Line, Tlen+1, 23, Tlen);
yystate(44, [C|Ics], Line, Tlen, _, _) when C >= 67, C =< 90 ->
    yystate(48, Ics, Line, Tlen+1, 23, Tlen);
yystate(44, [C|Ics], Line, Tlen, _, _) when C >= 97, C =< 122 ->
    yystate(48, Ics, Line, Tlen+1, 23, Tlen);
yystate(44, Ics, Line, Tlen, _, _) ->
    {23,Tlen,Ics,Line,44};
yystate(43, Ics, Line, Tlen, _, _) ->
    {7,Tlen,Ics,Line};
yystate(42, [73|Ics], Line, Tlen, _, _) ->
    yystate(46, Ics, Line, Tlen+1, 23, Tlen);
yystate(42, [C|Ics], Line, Tlen, _, _) when C >= 65, C =< 72 ->
    yystate(48, Ics, Line, Tlen+1, 23, Tlen);
yystate(42, [C|Ics], Line, Tlen, _, _) when C >= 74, C =< 90 ->
    yystate(48, Ics, Line, Tlen+1, 23, Tlen);
yystate(42, [C|Ics], Line, Tlen, _, _) when C >= 97, C =< 122 ->
    yystate(48, Ics, Line, Tlen+1, 23, Tlen);
yystate(42, Ics, Line, Tlen, _, _) ->
    {23,Tlen,Ics,Line,42};
yystate(41, Ics, Line, Tlen, _, _) ->
    {24,Tlen,Ics,Line};
yystate(40, [83|Ics], Line, Tlen, _, _) ->
    yystate(36, Ics, Line, Tlen+1, 23, Tlen);
yystate(40, [C|Ics], Line, Tlen, _, _) when C >= 65, C =< 82 ->
    yystate(48, Ics, Line, Tlen+1, 23, Tlen);
yystate(40, [C|Ics], Line, Tlen, _, _) when C >= 84, C =< 90 ->
    yystate(48, Ics, Line, Tlen+1, 23, Tlen);
yystate(40, [C|Ics], Line, Tlen, _, _) when C >= 97, C =< 122 ->
    yystate(48, Ics, Line, Tlen+1, 23, Tlen);
yystate(40, Ics, Line, Tlen, _, _) ->
    {23,Tlen,Ics,Line,40};
yystate(39, Ics, Line, Tlen, _, _) ->
    {26,Tlen,Ics,Line};
yystate(38, [C|Ics], Line, Tlen, _, _) when C >= 65, C =< 90 ->
    yystate(48, Ics, Line, Tlen+1, 16, Tlen);
yystate(38, [C|Ics], Line, Tlen, _, _) when C >= 97, C =< 122 ->
    yystate(48, Ics, Line, Tlen+1, 16, Tlen);
yystate(38, Ics, Line, Tlen, _, _) ->
    {16,Tlen,Ics,Line,38};
yystate(37, [65|Ics], Line, Tlen, _, _) ->
    yystate(33, Ics, Line, Tlen+1, 23, Tlen);
yystate(37, [C|Ics], Line, Tlen, _, _) when C >= 66, C =< 90 ->
    yystate(48, Ics, Line, Tlen+1, 23, Tlen);
yystate(37, [C|Ics], Line, Tlen, _, _) when C >= 97, C =< 122 ->
    yystate(48, Ics, Line, Tlen+1, 23, Tlen);
yystate(37, Ics, Line, Tlen, _, _) ->
    {23,Tlen,Ics,Line,37};
yystate(36, [C|Ics], Line, Tlen, _, _) when C >= 65, C =< 90 ->
    yystate(48, Ics, Line, Tlen+1, 18, Tlen);
yystate(36, [C|Ics], Line, Tlen, _, _) when C >= 97, C =< 122 ->
    yystate(48, Ics, Line, Tlen+1, 18, Tlen);
yystate(36, Ics, Line, Tlen, _, _) ->
    {18,Tlen,Ics,Line,36};
yystate(35, Ics, Line, Tlen, _, _) ->
    {27,Tlen,Ics,Line};
yystate(34, [80|Ics], Line, Tlen, _, _) ->
    yystate(38, Ics, Line, Tlen+1, 23, Tlen);
yystate(34, [C|Ics], Line, Tlen, _, _) when C >= 65, C =< 79 ->
    yystate(48, Ics, Line, Tlen+1, 23, Tlen);
yystate(34, [C|Ics], Line, Tlen, _, _) when C >= 81, C =< 90 ->
    yystate(48, Ics, Line, Tlen+1, 23, Tlen);
yystate(34, [C|Ics], Line, Tlen, _, _) when C >= 97, C =< 122 ->
    yystate(48, Ics, Line, Tlen+1, 23, Tlen);
yystate(34, Ics, Line, Tlen, _, _) ->
    {23,Tlen,Ics,Line,34};
yystate(33, [78|Ics], Line, Tlen, _, _) ->
    yystate(29, Ics, Line, Tlen+1, 23, Tlen);
yystate(33, [C|Ics], Line, Tlen, _, _) when C >= 65, C =< 77 ->
    yystate(48, Ics, Line, Tlen+1, 23, Tlen);
yystate(33, [C|Ics], Line, Tlen, _, _) when C >= 79, C =< 90 ->
    yystate(48, Ics, Line, Tlen+1, 23, Tlen);
yystate(33, [C|Ics], Line, Tlen, _, _) when C >= 97, C =< 122 ->
    yystate(48, Ics, Line, Tlen+1, 23, Tlen);
yystate(33, Ics, Line, Tlen, _, _) ->
    {23,Tlen,Ics,Line,33};
yystate(32, [61|Ics], Line, Tlen, _, _) ->
    yystate(28, Ics, Line, Tlen+1, 4, Tlen);
yystate(32, Ics, Line, Tlen, _, _) ->
    {4,Tlen,Ics,Line,32};
yystate(31, [46|Ics], Line, Tlen, _, _) ->
    yystate(23, Ics, Line, Tlen+1, 22, Tlen);
yystate(31, [C|Ics], Line, Tlen, _, _) when C >= 48, C =< 57 ->
    yystate(31, Ics, Line, Tlen+1, 22, Tlen);
yystate(31, Ics, Line, Tlen, _, _) ->
    {22,Tlen,Ics,Line,31};
yystate(30, [89|Ics], Line, Tlen, _, _) ->
    yystate(48, Ics, Line, Tlen+1, 23, Tlen);
yystate(30, [90|Ics], Line, Tlen, _, _) ->
    yystate(48, Ics, Line, Tlen+1, 23, Tlen);
yystate(30, [88|Ics], Line, Tlen, _, _) ->
    yystate(34, Ics, Line, Tlen+1, 23, Tlen);
yystate(30, [C|Ics], Line, Tlen, _, _) when C >= 65, C =< 87 ->
    yystate(48, Ics, Line, Tlen+1, 23, Tlen);
yystate(30, [C|Ics], Line, Tlen, _, _) when C >= 97, C =< 122 ->
    yystate(48, Ics, Line, Tlen+1, 23, Tlen);
yystate(30, Ics, Line, Tlen, _, _) ->
    {23,Tlen,Ics,Line,30};
yystate(29, [C|Ics], Line, Tlen, _, _) when C >= 65, C =< 90 ->
    yystate(48, Ics, Line, Tlen+1, 19, Tlen);
yystate(29, [C|Ics], Line, Tlen, _, _) when C >= 97, C =< 122 ->
    yystate(48, Ics, Line, Tlen+1, 19, Tlen);
yystate(29, Ics, Line, Tlen, _, _) ->
    {19,Tlen,Ics,Line,29};
yystate(28, Ics, Line, Tlen, _, _) ->
    {2,Tlen,Ics,Line};
yystate(27, [C|Ics], Line, Tlen, _, _) when C >= 48, C =< 57 ->
    yystate(27, Ics, Line, Tlen+1, 22, Tlen);
yystate(27, Ics, Line, Tlen, _, _) ->
    {22,Tlen,Ics,Line,27};
yystate(26, [C|Ics], Line, Tlen, _, _) when C >= 65, C =< 90 ->
    yystate(48, Ics, Line, Tlen+1, 17, Tlen);
yystate(26, [C|Ics], Line, Tlen, _, _) when C >= 97, C =< 122 ->
    yystate(48, Ics, Line, Tlen+1, 17, Tlen);
yystate(26, Ics, Line, Tlen, _, _) ->
    {17,Tlen,Ics,Line,26};
yystate(25, [81|Ics], Line, Tlen, _, _) ->
    yystate(21, Ics, Line, Tlen+1, 23, Tlen);
yystate(25, [73|Ics], Line, Tlen, _, _) ->
    yystate(9, Ics, Line, Tlen+1, 23, Tlen);
yystate(25, [C|Ics], Line, Tlen, _, _) when C >= 65, C =< 72 ->
    yystate(48, Ics, Line, Tlen+1, 23, Tlen);
yystate(25, [C|Ics], Line, Tlen, _, _) when C >= 74, C =< 80 ->
    yystate(48, Ics, Line, Tlen+1, 23, Tlen);
yystate(25, [C|Ics], Line, Tlen, _, _) when C >= 82, C =< 90 ->
    yystate(48, Ics, Line, Tlen+1, 23, Tlen);
yystate(25, [C|Ics], Line, Tlen, _, _) when C >= 97, C =< 122 ->
    yystate(48, Ics, Line, Tlen+1, 23, Tlen);
yystate(25, Ics, Line, Tlen, _, _) ->
    {23,Tlen,Ics,Line,25};
yystate(24, Ics, Line, Tlen, _, _) ->
    {6,Tlen,Ics,Line};
yystate(23, [C|Ics], Line, Tlen, Action, Alen) when C >= 48, C =< 57 ->
    yystate(27, Ics, Line, Tlen+1, Action, Alen);
yystate(23, Ics, Line, Tlen, Action, Alen) ->
    {Action,Alen,Tlen,Ics,Line,23};
yystate(22, [71|Ics], Line, Tlen, _, _) ->
    yystate(26, Ics, Line, Tlen+1, 23, Tlen);
yystate(22, [C|Ics], Line, Tlen, _, _) when C >= 65, C =< 70 ->
    yystate(48, Ics, Line, Tlen+1, 23, Tlen);
yystate(22, [C|Ics], Line, Tlen, _, _) when C >= 72, C =< 90 ->
    yystate(48, Ics, Line, Tlen+1, 23, Tlen);
yystate(22, [C|Ics], Line, Tlen, _, _) when C >= 97, C =< 122 ->
    yystate(48, Ics, Line, Tlen+1, 23, Tlen);
yystate(22, Ics, Line, Tlen, _, _) ->
    {23,Tlen,Ics,Line,22};
yystate(21, [82|Ics], Line, Tlen, _, _) ->
    yystate(17, Ics, Line, Tlen+1, 23, Tlen);
yystate(21, [C|Ics], Line, Tlen, _, _) when C >= 65, C =< 81 ->
    yystate(48, Ics, Line, Tlen+1, 23, Tlen);
yystate(21, [C|Ics], Line, Tlen, _, _) when C >= 83, C =< 90 ->
    yystate(48, Ics, Line, Tlen+1, 23, Tlen);
yystate(21, [C|Ics], Line, Tlen, _, _) when C >= 97, C =< 122 ->
    yystate(48, Ics, Line, Tlen+1, 23, Tlen);
yystate(21, Ics, Line, Tlen, _, _) ->
    {23,Tlen,Ics,Line,21};
yystate(20, [62|Ics], Line, Tlen, _, _) ->
    yystate(16, Ics, Line, Tlen+1, 5, Tlen);
yystate(20, [61|Ics], Line, Tlen, _, _) ->
    yystate(12, Ics, Line, Tlen+1, 5, Tlen);
yystate(20, Ics, Line, Tlen, _, _) ->
    {5,Tlen,Ics,Line,20};
yystate(19, [48|Ics], Line, Tlen, _, _) ->
    yystate(31, Ics, Line, Tlen+1, 28, Tlen);
yystate(19, [C|Ics], Line, Tlen, _, _) when C >= 49, C =< 57 ->
    yystate(31, Ics, Line, Tlen+1, 28, Tlen);
yystate(19, Ics, Line, Tlen, _, _) ->
    {28,Tlen,Ics,Line,19};
yystate(18, [79|Ics], Line, Tlen, _, _) ->
    yystate(22, Ics, Line, Tlen+1, 23, Tlen);
yystate(18, [C|Ics], Line, Tlen, _, _) when C >= 65, C =< 78 ->
    yystate(48, Ics, Line, Tlen+1, 23, Tlen);
yystate(18, [C|Ics], Line, Tlen, _, _) when C >= 80, C =< 90 ->
    yystate(48, Ics, Line, Tlen+1, 23, Tlen);
yystate(18, [C|Ics], Line, Tlen, _, _) when C >= 97, C =< 122 ->
    yystate(48, Ics, Line, Tlen+1, 23, Tlen);
yystate(18, Ics, Line, Tlen, _, _) ->
    {23,Tlen,Ics,Line,18};
yystate(17, [84|Ics], Line, Tlen, _, _) ->
    yystate(13, Ics, Line, Tlen+1, 23, Tlen);
yystate(17, [C|Ics], Line, Tlen, _, _) when C >= 65, C =< 83 ->
    yystate(48, Ics, Line, Tlen+1, 23, Tlen);
yystate(17, [C|Ics], Line, Tlen, _, _) when C >= 85, C =< 90 ->
    yystate(48, Ics, Line, Tlen+1, 23, Tlen);
yystate(17, [C|Ics], Line, Tlen, _, _) when C >= 97, C =< 122 ->
    yystate(48, Ics, Line, Tlen+1, 23, Tlen);
yystate(17, Ics, Line, Tlen, _, _) ->
    {23,Tlen,Ics,Line,17};
yystate(16, Ics, Line, Tlen, _, _) ->
    {1,Tlen,Ics,Line};
yystate(15, [C|Ics], Line, Tlen, _, _) when C >= 0, C =< 9 ->
    yystate(15, Ics, Line, Tlen+1, 0, Tlen);
yystate(15, [C|Ics], Line, Tlen, _, _) when C >= 11 ->
    yystate(15, Ics, Line, Tlen+1, 0, Tlen);
yystate(15, Ics, Line, Tlen, _, _) ->
    {0,Tlen,Ics,Line,15};
yystate(14, [C|Ics], Line, Tlen, _, _) when C >= 65, C =< 90 ->
    yystate(48, Ics, Line, Tlen+1, 12, Tlen);
yystate(14, [C|Ics], Line, Tlen, _, _) when C >= 97, C =< 122 ->
    yystate(48, Ics, Line, Tlen+1, 12, Tlen);
yystate(14, Ics, Line, Tlen, _, _) ->
    {12,Tlen,Ics,Line,14};
yystate(13, [C|Ics], Line, Tlen, _, _) when C >= 65, C =< 90 ->
    yystate(48, Ics, Line, Tlen+1, 13, Tlen);
yystate(13, [C|Ics], Line, Tlen, _, _) when C >= 97, C =< 122 ->
    yystate(48, Ics, Line, Tlen+1, 13, Tlen);
yystate(13, Ics, Line, Tlen, _, _) ->
    {13,Tlen,Ics,Line,13};
yystate(12, Ics, Line, Tlen, _, _) ->
    {3,Tlen,Ics,Line};
yystate(11, [C|Ics], Line, Tlen, Action, Alen) when C >= 0, C =< 9 ->
    yystate(15, Ics, Line, Tlen+1, Action, Alen);
yystate(11, [C|Ics], Line, Tlen, Action, Alen) when C >= 11 ->
    yystate(15, Ics, Line, Tlen+1, Action, Alen);
yystate(11, Ics, Line, Tlen, Action, Alen) ->
    {Action,Alen,Tlen,Ics,Line,11};
yystate(10, [68|Ics], Line, Tlen, _, _) ->
    yystate(14, Ics, Line, Tlen+1, 23, Tlen);
yystate(10, [C|Ics], Line, Tlen, _, _) when C >= 65, C =< 67 ->
    yystate(48, Ics, Line, Tlen+1, 23, Tlen);
yystate(10, [C|Ics], Line, Tlen, _, _) when C >= 69, C =< 90 ->
    yystate(48, Ics, Line, Tlen+1, 23, Tlen);
yystate(10, [C|Ics], Line, Tlen, _, _) when C >= 97, C =< 122 ->
    yystate(48, Ics, Line, Tlen+1, 23, Tlen);
yystate(10, Ics, Line, Tlen, _, _) ->
    {23,Tlen,Ics,Line,10};
yystate(9, [78|Ics], Line, Tlen, _, _) ->
    yystate(5, Ics, Line, Tlen+1, 23, Tlen);
yystate(9, [C|Ics], Line, Tlen, _, _) when C >= 65, C =< 77 ->
    yystate(48, Ics, Line, Tlen+1, 23, Tlen);
yystate(9, [C|Ics], Line, Tlen, _, _) when C >= 79, C =< 90 ->
    yystate(48, Ics, Line, Tlen+1, 23, Tlen);
yystate(9, [C|Ics], Line, Tlen, _, _) when C >= 97, C =< 122 ->
    yystate(48, Ics, Line, Tlen+1, 23, Tlen);
yystate(9, Ics, Line, Tlen, _, _) ->
    {23,Tlen,Ics,Line,9};
yystate(8, Ics, Line, Tlen, _, _) ->
    {9,Tlen,Ics,Line};
yystate(7, [47|Ics], Line, Tlen, _, _) ->
    yystate(11, Ics, Line, Tlen+1, 28, Tlen);
yystate(7, Ics, Line, Tlen, _, _) ->
    {28,Tlen,Ics,Line,7};
yystate(6, [79|Ics], Line, Tlen, _, _) ->
    yystate(10, Ics, Line, Tlen+1, 23, Tlen);
yystate(6, [C|Ics], Line, Tlen, _, _) when C >= 65, C =< 78 ->
    yystate(48, Ics, Line, Tlen+1, 23, Tlen);
yystate(6, [C|Ics], Line, Tlen, _, _) when C >= 80, C =< 90 ->
    yystate(48, Ics, Line, Tlen+1, 23, Tlen);
yystate(6, [C|Ics], Line, Tlen, _, _) when C >= 97, C =< 122 ->
    yystate(48, Ics, Line, Tlen+1, 23, Tlen);
yystate(6, Ics, Line, Tlen, _, _) ->
    {23,Tlen,Ics,Line,6};
yystate(5, [C|Ics], Line, Tlen, _, _) when C >= 65, C =< 90 ->
    yystate(48, Ics, Line, Tlen+1, 14, Tlen);
yystate(5, [C|Ics], Line, Tlen, _, _) when C >= 97, C =< 122 ->
    yystate(48, Ics, Line, Tlen+1, 14, Tlen);
yystate(5, Ics, Line, Tlen, _, _) ->
    {14,Tlen,Ics,Line,5};
yystate(4, [C|Ics], Line, Tlen, Action, Alen) when C >= 48, C =< 57 ->
    yystate(0, Ics, Line, Tlen+1, Action, Alen);
yystate(4, Ics, Line, Tlen, Action, Alen) ->
    {Action,Alen,Tlen,Ics,Line,4};
yystate(3, [46|Ics], Line, Tlen, _, _) ->
    yystate(4, Ics, Line, Tlen+1, 21, Tlen);
yystate(3, [C|Ics], Line, Tlen, _, _) when C >= 48, C =< 57 ->
    yystate(3, Ics, Line, Tlen+1, 21, Tlen);
yystate(3, Ics, Line, Tlen, _, _) ->
    {21,Tlen,Ics,Line,3};
yystate(2, [C|Ics], Line, Tlen, _, _) when C >= 65, C =< 90 ->
    yystate(48, Ics, Line, Tlen+1, 20, Tlen);
yystate(2, [C|Ics], Line, Tlen, _, _) when C >= 97, C =< 122 ->
    yystate(48, Ics, Line, Tlen+1, 20, Tlen);
yystate(2, Ics, Line, Tlen, _, _) ->
    {20,Tlen,Ics,Line,2};
yystate(1, [73|Ics], Line, Tlen, _, _) ->
    yystate(2, Ics, Line, Tlen+1, 23, Tlen);
yystate(1, [C|Ics], Line, Tlen, _, _) when C >= 65, C =< 72 ->
    yystate(48, Ics, Line, Tlen+1, 23, Tlen);
yystate(1, [C|Ics], Line, Tlen, _, _) when C >= 74, C =< 90 ->
    yystate(48, Ics, Line, Tlen+1, 23, Tlen);
yystate(1, [C|Ics], Line, Tlen, _, _) when C >= 97, C =< 122 ->
    yystate(48, Ics, Line, Tlen+1, 23, Tlen);
yystate(1, Ics, Line, Tlen, _, _) ->
    {23,Tlen,Ics,Line,1};
yystate(0, [C|Ics], Line, Tlen, _, _) when C >= 48, C =< 57 ->
    yystate(0, Ics, Line, Tlen+1, 21, Tlen);
yystate(0, Ics, Line, Tlen, _, _) ->
    {21,Tlen,Ics,Line,0};
yystate(S, Ics, Line, Tlen, Action, Alen) ->
    {Action,Alen,Tlen,Ics,Line,S}.

%% yyaction(Action, TokenLength, TokenChars, TokenLine) ->
%% {token,Token} | {end_token, Token} | skip_token | {error,String}.
%% Generated action function.

yyaction(0, _, _, _) ->
    yyaction_0();
yyaction(1, TokenLen, YYtcs, TokenLine) ->
    TokenChars = yypre(YYtcs, TokenLen),
    yyaction_1(TokenChars, TokenLine);
yyaction(2, TokenLen, YYtcs, TokenLine) ->
    TokenChars = yypre(YYtcs, TokenLen),
    yyaction_2(TokenChars, TokenLine);
yyaction(3, TokenLen, YYtcs, TokenLine) ->
    TokenChars = yypre(YYtcs, TokenLen),
    yyaction_3(TokenChars, TokenLine);
yyaction(4, TokenLen, YYtcs, TokenLine) ->
    TokenChars = yypre(YYtcs, TokenLen),
    yyaction_4(TokenChars, TokenLine);
yyaction(5, TokenLen, YYtcs, TokenLine) ->
    TokenChars = yypre(YYtcs, TokenLen),
    yyaction_5(TokenChars, TokenLine);
yyaction(6, TokenLen, YYtcs, TokenLine) ->
    TokenChars = yypre(YYtcs, TokenLen),
    yyaction_6(TokenChars, TokenLine);
yyaction(7, TokenLen, YYtcs, TokenLine) ->
    TokenChars = yypre(YYtcs, TokenLen),
    yyaction_7(TokenChars, TokenLine);
yyaction(8, TokenLen, YYtcs, TokenLine) ->
    TokenChars = yypre(YYtcs, TokenLen),
    yyaction_8(TokenChars, TokenLine);
yyaction(9, _, _, TokenLine) ->
    yyaction_9(TokenLine);
yyaction(10, _, _, TokenLine) ->
    yyaction_10(TokenLine);
yyaction(11, _, _, TokenLine) ->
    yyaction_11(TokenLine);
yyaction(12, _, _, TokenLine) ->
    yyaction_12(TokenLine);
yyaction(13, TokenLen, YYtcs, TokenLine) ->
    TokenChars = yypre(YYtcs, TokenLen),
    yyaction_13(TokenChars, TokenLine);
yyaction(14, TokenLen, YYtcs, TokenLine) ->
    TokenChars = yypre(YYtcs, TokenLen),
    yyaction_14(TokenChars, TokenLine);
yyaction(15, TokenLen, YYtcs, TokenLine) ->
    TokenChars = yypre(YYtcs, TokenLen),
    yyaction_15(TokenChars, TokenLine);
yyaction(16, TokenLen, YYtcs, TokenLine) ->
    TokenChars = yypre(YYtcs, TokenLen),
    yyaction_16(TokenChars, TokenLine);
yyaction(17, TokenLen, YYtcs, TokenLine) ->
    TokenChars = yypre(YYtcs, TokenLen),
    yyaction_17(TokenChars, TokenLine);
yyaction(18, TokenLen, YYtcs, TokenLine) ->
    TokenChars = yypre(YYtcs, TokenLen),
    yyaction_18(TokenChars, TokenLine);
yyaction(19, TokenLen, YYtcs, TokenLine) ->
    TokenChars = yypre(YYtcs, TokenLen),
    yyaction_19(TokenChars, TokenLine);
yyaction(20, _, _, TokenLine) ->
    yyaction_20(TokenLine);
yyaction(21, TokenLen, YYtcs, TokenLine) ->
    TokenChars = yypre(YYtcs, TokenLen),
    yyaction_21(TokenChars, TokenLine);
yyaction(22, TokenLen, YYtcs, TokenLine) ->
    TokenChars = yypre(YYtcs, TokenLen),
    yyaction_22(TokenChars, TokenLine);
yyaction(23, TokenLen, YYtcs, TokenLine) ->
    TokenChars = yypre(YYtcs, TokenLen),
    yyaction_23(TokenChars, TokenLine);
yyaction(24, _, _, TokenLine) ->
    yyaction_24(TokenLine);
yyaction(25, _, _, TokenLine) ->
    yyaction_25(TokenLine);
yyaction(26, _, _, TokenLine) ->
    yyaction_26(TokenLine);
yyaction(27, _, _, TokenLine) ->
    yyaction_27(TokenLine);
yyaction(28, TokenLen, YYtcs, TokenLine) ->
    TokenChars = yypre(YYtcs, TokenLen),
    yyaction_28(TokenChars, TokenLine);
yyaction(29, _, _, _) ->
    yyaction_29();
yyaction(_, _, _, _) -> error.

-compile({inline,yyaction_0/0}).
-file("/home/zangther/prog/logo-interpreter/logoscanner.xrl", 8).
yyaction_0() ->
     skip_token .

-compile({inline,yyaction_1/2}).
-file("/home/zangther/prog/logo-interpreter/logoscanner.xrl", 10).
yyaction_1(TokenChars, TokenLine) ->
     { token, { b_op, TokenLine, TokenChars } } .

-compile({inline,yyaction_2/2}).
-file("/home/zangther/prog/logo-interpreter/logoscanner.xrl", 11).
yyaction_2(TokenChars, TokenLine) ->
     { token, { b_op, TokenLine, TokenChars } } .

-compile({inline,yyaction_3/2}).
-file("/home/zangther/prog/logo-interpreter/logoscanner.xrl", 12).
yyaction_3(TokenChars, TokenLine) ->
     { token, { b_op, TokenLine, TokenChars } } .

-compile({inline,yyaction_4/2}).
-file("/home/zangther/prog/logo-interpreter/logoscanner.xrl", 13).
yyaction_4(TokenChars, TokenLine) ->
     { token, { b_op, TokenLine, TokenChars } } .

-compile({inline,yyaction_5/2}).
-file("/home/zangther/prog/logo-interpreter/logoscanner.xrl", 14).
yyaction_5(TokenChars, TokenLine) ->
     { token, { b_op, TokenLine, TokenChars } } .

-compile({inline,yyaction_6/2}).
-file("/home/zangther/prog/logo-interpreter/logoscanner.xrl", 15).
yyaction_6(TokenChars, TokenLine) ->
     { token, { b_op, TokenLine, TokenChars } } .

-compile({inline,yyaction_7/2}).
-file("/home/zangther/prog/logo-interpreter/logoscanner.xrl", 16).
yyaction_7(TokenChars, TokenLine) ->
     { token, { b_comp, TokenLine, TokenChars } } .

-compile({inline,yyaction_8/2}).
-file("/home/zangther/prog/logo-interpreter/logoscanner.xrl", 17).
yyaction_8(TokenChars, TokenLine) ->
     { token, { b_comp, TokenLine, TokenChars } } .

-compile({inline,yyaction_9/1}).
-file("/home/zangther/prog/logo-interpreter/logoscanner.xrl", 19).
yyaction_9(TokenLine) ->
     { token, { get, TokenLine } } .

-compile({inline,yyaction_10/1}).
-file("/home/zangther/prog/logo-interpreter/logoscanner.xrl", 20).
yyaction_10(TokenLine) ->
     { token, { set, TokenLine } } .

-compile({inline,yyaction_11/1}).
-file("/home/zangther/prog/logo-interpreter/logoscanner.xrl", 22).
yyaction_11(TokenLine) ->
     { token, { a_op, TokenLine, 'div' } } .

-compile({inline,yyaction_12/1}).
-file("/home/zangther/prog/logo-interpreter/logoscanner.xrl", 23).
yyaction_12(TokenLine) ->
     { token, { a_op, TokenLine, mod } } .

-compile({inline,yyaction_13/2}).
-file("/home/zangther/prog/logo-interpreter/logoscanner.xrl", 25).
yyaction_13(TokenChars, TokenLine) ->
     { token, { a_func, TokenLine, TokenChars } } .

-compile({inline,yyaction_14/2}).
-file("/home/zangther/prog/logo-interpreter/logoscanner.xrl", 26).
yyaction_14(TokenChars, TokenLine) ->
     { token, { a_func, TokenLine, TokenChars } } .

-compile({inline,yyaction_15/2}).
-file("/home/zangther/prog/logo-interpreter/logoscanner.xrl", 27).
yyaction_15(TokenChars, TokenLine) ->
     { token, { a_func, TokenLine, TokenChars } } .

-compile({inline,yyaction_16/2}).
-file("/home/zangther/prog/logo-interpreter/logoscanner.xrl", 28).
yyaction_16(TokenChars, TokenLine) ->
     { token, { a_func, TokenLine, TokenChars } } .

-compile({inline,yyaction_17/2}).
-file("/home/zangther/prog/logo-interpreter/logoscanner.xrl", 29).
yyaction_17(TokenChars, TokenLine) ->
     { token, { a_func, TokenLine, TokenChars } } .

-compile({inline,yyaction_18/2}).
-file("/home/zangther/prog/logo-interpreter/logoscanner.xrl", 30).
yyaction_18(TokenChars, TokenLine) ->
     { token, { a_func, TokenLine, TokenChars } } .

-compile({inline,yyaction_19/2}).
-file("/home/zangther/prog/logo-interpreter/logoscanner.xrl", 31).
yyaction_19(TokenChars, TokenLine) ->
     { token, { a_func, TokenLine, TokenChars } } .

-compile({inline,yyaction_20/1}).
-file("/home/zangther/prog/logo-interpreter/logoscanner.xrl", 32).
yyaction_20(TokenLine) ->
     { token, { pi, TokenLine } } .

-compile({inline,yyaction_21/2}).
-file("/home/zangther/prog/logo-interpreter/logoscanner.xrl", 34).
yyaction_21(TokenChars, TokenLine) ->
     { token, { number, TokenLine, string_to_number (TokenChars) } } .

-compile({inline,yyaction_22/2}).
-file("/home/zangther/prog/logo-interpreter/logoscanner.xrl", 35).
yyaction_22(TokenChars, TokenLine) ->
     { token, { number, TokenLine, 0 - string_to_number (TokenChars) } } .

-compile({inline,yyaction_23/2}).
-file("/home/zangther/prog/logo-interpreter/logoscanner.xrl", 36).
yyaction_23(TokenChars, TokenLine) ->
     { token, string_to_token (TokenChars, TokenLine) } .

-compile({inline,yyaction_24/1}).
-file("/home/zangther/prog/logo-interpreter/logoscanner.xrl", 38).
yyaction_24(TokenLine) ->
     { token, { open_bracket, TokenLine } } .

-compile({inline,yyaction_25/1}).
-file("/home/zangther/prog/logo-interpreter/logoscanner.xrl", 39).
yyaction_25(TokenLine) ->
     { token, { close_bracket, TokenLine } } .

-compile({inline,yyaction_26/1}).
-file("/home/zangther/prog/logo-interpreter/logoscanner.xrl", 40).
yyaction_26(TokenLine) ->
     { token, { open_parent, TokenLine } } .

-compile({inline,yyaction_27/1}).
-file("/home/zangther/prog/logo-interpreter/logoscanner.xrl", 41).
yyaction_27(TokenLine) ->
     { token, { close_parent, TokenLine } } .

-compile({inline,yyaction_28/2}).
-file("/home/zangther/prog/logo-interpreter/logoscanner.xrl", 42).
yyaction_28(TokenChars, TokenLine) ->
     { token, { string_to_operator (TokenChars), TokenLine } } .

-compile({inline,yyaction_29/0}).
-file("/home/zangther/prog/logo-interpreter/logoscanner.xrl", 44).
yyaction_29() ->
     skip_token .

-file("/usr/lib/erlang/lib/parsetools-2.0.7/include/leexinc.hrl", 282).
